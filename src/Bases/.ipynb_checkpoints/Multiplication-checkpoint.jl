{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fd63d8b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#I believe this builts a Toeplitz multiplication matrix with the coeffs out to N coeffs on either diag?\n",
    "function toeplitz(c::Vector,N::Integer) #QUESTION: is this N even needed???\n",
    "    mm = length(c) # should be simpler\n",
    "    m₋ = N₋(mm)\n",
    "    m₊ = N₊(mm)\n",
    "    dm = N - m₋ - 1\n",
    "    range = m₋:-1:-convert(Int64,floor((mm-1)/2))\n",
    "    range = range .+ (dm < 0 ? dm : 0)\n",
    "    mstart = max(0,-dm)\n",
    "    mend = min(m₋ + dm,m₊)\n",
    "    diags1 = [fill(c[1+j],1+j+dm) for j in mstart:m₋]\n",
    "    diags2 = [fill(c[m₋+1+j],m₋+1-j+dm) for j in 1:mend]\n",
    "    diags = vcat(diags1,diags2)\n",
    "    inds = map( (x,y) -> x => y, range,diags)\n",
    "    T = spdiagm(inds[1:1]...)\n",
    "    for i=2:length(inds)\n",
    "        T += spdiagm(inds[i:i]...)\n",
    "    end\n",
    "    \n",
    "    M = T .- (c*(transpose(ones(mm)))) .- ((sum(c))*I)\n",
    "end\n",
    "\n",
    "#It seems like it is returning the elements in a toeplitz matrix??\n",
    "function toeplitz_function(c::Vector)\n",
    "    function F(k,j)\n",
    "        nm = N₋(length(c))\n",
    "        d = sum(c)\n",
    "        # F(0,0) = c[nm+1]\n",
    "        # F(j,j) = c[nm+1]\n",
    "        # F(j - i, j) = c[nm + 1 - i], k = j - i, i = j - k\n",
    "        # F(k,j) = c[nm + 1 + j -k] (assuming k is row and j is column)\n",
    "        if nm + 1 + j -k< 1 || nm + 1 + j -k > length(c)\n",
    "            return 0.0 - c[k] - d\n",
    "        else\n",
    "            return c[nm + 1 + j - k] - c[k] - d\n",
    "        end\n",
    "    end\n",
    "end\n",
    "\n",
    "#Actually defines how to apply multiplication to the Rational space\n",
    "function *(M::Multiplication,sp::Rational)\n",
    "    if typeof(M.f) <: Function #QUESTION: What is M.f???\n",
    "        a = sp.GD.D.a\n",
    "        b = sp.GD.D.b\n",
    "        GD = PeriodicMappedInterval(a,b) #QUESTION: Is this the one we want??\n",
    "        ff = BasisExpansion(M.f,Rational(GD)) |> chop\n",
    "    else \n",
    "        ff = M.f\n",
    "    end\n",
    "    \n",
    "    if typeof(ff.basis) <: Rational && isconvertible(ff.basis,sp)\n",
    "        np = N₋(length(ff.c)); nm = length(ff.c) - np + 1 #why even define nm??\n",
    "        Op = BasicBandedOperator{ℤ,ℤ}(np,np,toeplitz_function(ff.c)) #creates Toeplitz operator\n",
    "    else \n",
    "        1 + 1 #TODO: just evaluate and expand, need transform #I am assumping this will just use toeplitz()\n",
    "    end\n",
    "    ConcreteOperator(sp,sp,Op) #operator in practice for multiplication\n",
    "end"
   ]
  }
 ],
 "metadata": {
  "@webio": {
   "lastCommId": null,
   "lastKernelId": null
  },
  "kernelspec": {
   "display_name": "Julia 1.8.5",
   "language": "julia",
   "name": "julia-1.8"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "1.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
