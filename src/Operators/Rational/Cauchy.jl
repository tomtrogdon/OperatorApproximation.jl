{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fd63d8b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#inverse Mobius transform\n",
    "Tm1 = z-> (1/1im)*((z+1)/(z-1))\n",
    "\n",
    "#theta_vec\n",
    "θ_vals = shift_mgrid(500,π)\n",
    "\n",
    "#k_vec\n",
    "k_vals = complex(zeros(length(θ_vals)-1))\n",
    "for i=2:length(θ_vals)\n",
    "    k_vals[i-1] = Tm1(exp(θ_vals[i]))\n",
    "end\n",
    "\n",
    "#define z\n",
    "z = (k,σ)-> (-2im.*σ)./(k.+(σ.*1im))\n",
    "\n",
    "#three term recurrence for generalized Lauguerre polynomials\n",
    "function L_poly_x(x,α,nm1)\n",
    "    num_polys = nm1+2\n",
    "    L_poly = zeros(num_polys,1)\n",
    "    if num_polys == 1\n",
    "        L_poly[1] = 0\n",
    "    elseif num_polys == 2\n",
    "        L_poly[1] = 0\n",
    "        L_poly[2] = 1\n",
    "    else\n",
    "        L_poly[1] = 0 #L_-1\n",
    "        L_poly[2] = 1 #L_0\n",
    "        L_poly[3] = 1+α-x #L_1\n",
    "        L_iter = 3\n",
    "        for n=1:num_polys-3\n",
    "            L_np1α = ((((2*n)+1+α-x)*L_poly[L_iter])-((n+α)*L_poly[L_iter-1]))/(n+1) #L_n+1\n",
    "            L_poly[n+3] = L_np1α\n",
    "            L_iter += 1\n",
    "        end\n",
    "    end\n",
    "    return L_poly\n",
    "end\n",
    "\n",
    "function M(k,σ,j)\n",
    "    Mσ = complex(zeros(length(k),j))\n",
    "    for h=1:length(k)\n",
    "        Mσ[h,1] = 0 #r_0\n",
    "        for i=1:j-1\n",
    "            r_jα = ((1+z(k[h],σ))*Mσ[h,i]) + (z(k[h],σ)*(L_poly_x(2*abs(k[h]),1,i-1)[end] - L_poly_x(2*abs(k[h]),2,i-2)[end]))\n",
    "            Mσ[h,i+1] = r_jα\n",
    "        end\n",
    "    end\n",
    "    return Mσ\n",
    "end\n",
    "\n",
    "# #let's pseudocode some shit:\n",
    "# function Cauchy(α,f,k_vals)\n",
    "#     if α > 0\n",
    "#         term1 = expansion of f in the Rational basis (How do I do this??)\n",
    "#         term2 = R_{2m+1,0}*v(k_vals) (How exactly do I just extract R_{2m+1}??) (What is m, total number of coeffs???)\n",
    "#         if want C+\n",
    "#             return term1 + term2\n",
    "#         else\n",
    "#             return C+-I (Do I need to do anything special with this??)\n",
    "#         end\n",
    "#     else\n",
    "#         if want C+\n",
    "#             return -R_{2m+1,0}*v(k_vals)\n",
    "#         else\n",
    "#             return C+-I\n",
    "#         end\n",
    "#     end\n",
    "# end"
   ]
  }
 ],
 "metadata": {
  "@webio": {
   "lastCommId": null,
   "lastKernelId": null
  },
  "kernelspec": {
   "display_name": "Julia 1.8.5",
   "language": "julia",
   "name": "julia-1.8"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "1.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
